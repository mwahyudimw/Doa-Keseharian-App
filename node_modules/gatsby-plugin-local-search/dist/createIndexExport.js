"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIndexExport = void 0;

var _lunr = _interopRequireDefault(require("lunr"));

var _flexsearch = _interopRequireDefault(require("flexsearch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// Returns an exported FlexSearch index using the provided documents, fields,
// and ref.
const createFlexSearchIndexExport = ({
  documents,
  ref
}) => {
  const index = _flexsearch.default.create();

  documents.forEach(doc => index.add(doc[ref], JSON.stringify(doc)));
  return index.export();
}; // Returns an exported Lunr index using the provided documents, fields, and
// ref.


const createLunrIndexExport = ({
  documents,
  fields,
  ref
}) => {
  const index = (0, _lunr.default)(function () {
    this.ref(ref);
    fields.forEach(x => this.field(x));
    documents.forEach(x => this.add(x));
  });
  return JSON.stringify(index);
}; // Returns an exported index using the provided engine, documents, fields, and
// ref. Throws if the provided engine is invalid.


const createIndexExport = (_ref) => {
  let engine = _ref.engine,
      args = _objectWithoutProperties(_ref, ["engine"]);

  switch (engine) {
    case 'flexsearch':
      return createFlexSearchIndexExport(args);

    case 'lunr':
      return createLunrIndexExport(args);

    default:
      throw new Error('gatsby-plugin-local-search engine is invalid. Must be one of: flexsearch, lunr.');
  }
};

exports.createIndexExport = createIndexExport;